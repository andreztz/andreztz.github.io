[{"ref":"https://andreztz.github.io/blog/posts/openwrt-interface-web-seguranca/","title":"Protegendo o acesso a interface web do Openwrt","section":"blog","tags":null,"date":"2022.04.05","body":"Protegendo o acesso a interface web do openwrt O Openwrt pode ser gerenciado no terminal via ssh, ou pela interface web do usuário LuCI. O uso da interface web facilita a administração do sistema, no entanto, por padrão a interface web não tem suporte a conexão segura usando o HTTPS. Por esse motivo existe o risco de um invasor capturar o trafego de rede e obter as credenciais de autenticação, visto que a troca de mensagens entre cliente e servidor sem a camada de segurança do HTTPS (SSL/TLS) é feito em texto puro.\nO Openwrt oferece a opção de implementar o HTTPS, mas é preciso gerar e armazenar um certificado TLS autoassinado e requer a instalação de pacotes adicionais (luci-ssl e dependências). No caso de dispositivos com pouca memoria, instalar pacotes adicionais não é uma opção, então gostaria de apresentar outra configuração que pode ser usada para proteger o acesso à interface web do Openwrt, que é encapsular o tráfego http via ssh.\nPrimeiro vamos fazer uma cópia e olhar o arquivo de configuração padrão do servidor web.\n$ scp openwrt:/etc/config/uhttpd ~ uhttpd 100% 710 458.3KB/s 00:00 $ head ~/uhttpd # Server configuration config uhttpd main # HTTP listen addresses, multiple allowed list listen_http\t0.0.0.0:80 list listen_http\t[::]:80 # HTTPS listen addresses, multiple allowed list listen_https\t0.0.0.0:443 list listen_https\t[::]:443 Usando o comando netstat -apn | grep :80 listamos os soquetes TCP/IP abertos pelo servidor web.\nroot@openwrt:~# netstat -apn | grep :80 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 :::80 :::* LISTEN root@openwrt:~# netstat -ana | grep :443 root@openwrt:~# A linha 0.0.0.0:80 nos diz que o computador local esta ouvindo a porta 80, a espera de conexões de qualquer computador remoto. O 0.0.0.0 é um endereço especial que representa todas as interfaces de rede com um IP válido nesse host, por exemplo, poderiamos ter duas interfaces com os seguintes endereços 192.168.1.1, 172.17.0.2 como o servidor web escuta usando o endereço 0.0.0.0:80 ambos respondem por esse endereço de socket.\nAgora a configuração do servidor web uHTTPd deve ser ajustada, para fazer isso conectamos ao roteador via SSH e abrimos o arquivo /etc/config/uhttpd.\n# vim /etc/config/uhttpd Em seguida, comentamos as linhas que contêm list listen_http * e adicionamos a linha list listen_http 127.0.0.1:80 . A seguir temos as primeiras linhas do arquivo de configuração após a edição.\n# Server configuration config uhttpd main # HTTP listen addresses, multiple allowed # list listen_http\t0.0.0.0:80 # esta linha deve estar comentada # list listen_http\t[::]:80 # esta linha deve estar comentada # HTTPS listen addresses, multiple allowed # list listen_https\t0.0.0.0:443 # esta linha deve estar comentada # list listen_https\t[::]:443 # esta linha deve estar comentada # linha adicionada list listen_http 127.0.0.1:80 ... Salve o arquivo e reinicie o serviço uHTTPd usando o comando:\n# /etc/init.d/uhttpd restart Com o comando netstat vemos que agora nosso servidor web escuta em um novo endereço:\nroot@openwrt:~# netstat -na | grep :80 tcp 0 0 127.0.0.1:80 0.0.0.0:* LISTEN O uso do endereço 127.0.0.1 tem objetivo de restringir o acesso a interface web para host remotos usando a interface de loopback, que é uma interface de rede virtual que é reservada para a comunicação interna no host.\nDepois de reiniciar o servidor, a interface web do LuCI não esta acessível através do IP usual 192.168.1.1, agora o servidor web escuta por novas conexões usando o endereço 127.0.0.1:80 e só podemos alcançá-la por meio de um túnel ssh.\nPara criar o túnel, execute o seguinte comando no terminal:\nveja: 127.0.0.1 vs 0.0.0.0\n# ssh -L 127.0.0.1:8080:127.0.0.1:80 root@192.168.1.1 veja: manual ssh -L Encaminhamento de portas\nPara evitar sempre digitar todo o comando que cria o túnel ssh adicione ao arquivo ~/.ssh/config o seguite:\nHost luci-tunnel Hostname openwrt.lan Port 22 User root LocalForward 127.0.0.1:8080 127.0.0.1:80 Então o tunel ssh pode ser criado com o seguinte comando:\n# ssh luci-tunnel O endereço local 127.0.0.1:8080 da máquina cliente é ligado através do túnel ssh ao endereço 127.0.0.1:80 do openwrt, onde o servidor web uHTTPd está aguardando solicitações. Agora é possivel abrir o endereço http://127.0.0.1:8080 no navegador e todo a comunicação HTTP com o servidor web é encapsulada no túnel SSH. Com isso todo o tráfico HTTP tem o mesmo nível de encriptação de uma sessão SSH. Enquanto a sessão SSH estiver aberta, será possível acessar a interface web usando um cliente HTTP. No terminal a combinação de teclas ctrl+c encerra a sessão SSH e a interface web do LuCI fica indisponivel.\nNa minha opinião essa configuração não é mais complexa do que instalar o pacote luci-ssl e depois gerar um certificado TLS (autoassinado), e é a configuração ideal para dispositivos com pouca memória.\nSegurança adicional Para minizar os riscos de acesso não autorizado através da interface web, disabiltar o servidor web e iniciá-lo via ssh somente quando necessário.\n/etc/init.d/uhttpd disable /etc/init.d/uhttpd stop uci comandos O uci pode ajustar a configuração do uhttpd sem usar um editor de texto, no terminal digite as linhas a seguir:\n# uci -q delete uhttpd.main.listen_http # uci add_list uhttpd.main.listen_http=\u0026#34;127.0.0.1:80\u0026#34; # uci add_list uhttpd.main.listen_http=\u0026#34;[::1]:80\u0026#34; # uci -q delete uhttpd.main.listen_https # uci add_list uhttpd.main.listen_https=\u0026#34;127.0.0.1:443\u0026#34; # uci add_list uhttpd.main.listen_https=\u0026#34;[::1]:443\u0026#34; # uci commit uhttpd # /etc/init.d/uhttpd restart "},{"ref":"https://andreztz.github.io/blog/posts/apagar-lista-assistir-mais-tarde-youtube/","title":"Como apagar a lista assistir mais tarde do youtube","section":"blog","tags":null,"date":"2021.05.31","body":"1- Abra your watch later playlist no youtube.\n2- Abra o console de desenvolvimento do seu navegador ( Ctrl+Shift+J para o chrome, Ctrl+Shift+K para o firefox )\n3- Cole o seguinte script no console\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // execute removeOne() every 30 milliseconds var interval = setInterval(removeOne, 30) // the number of displayed videos in the last execution of removeOne() var lastNumVideos = 0 function removeOne () { // number of videos displayed  var numVideos = document.querySelectorAll(\u0026#39;.pl-video-edit-remove\u0026#39;).length if (numVideos === lastNumVideos) { return // skip removal if the previously removed video is still present  } if (numVideos \u0026lt; 1) { try { // click load more if there are no displayed videos  document.querySelector(\u0026#39;.browse-items-load-more-button\u0026#39;).click() } catch (err) { console.log(\u0026#39;Load More button is missing. Refresh the page and restart the script to remove more videos.\u0026#39;) // stop repeating removeOne()  clearInterval(interval) } } else { // remove top most video  document.querySelector(\u0026#39;.pl-video-edit-remove\u0026#39;).click() lastNumVideos = numVideos } }   4- Pressione a tecla Enter, e aguarde o script finalizar.\n5- Atualize a página (F5 para atualizar), se ainda existir videos na playlist volte ao passo 3, caso contrário seja feliz.\nSe você precisar parar o script feche ou atualize a aba do seu navegador.\n"},{"ref":"https://andreztz.github.io/blog/posts/atalhos-teclado-openbox/","title":"Como configurar teclas de atalho no Openbox","section":"blog","tags":null,"date":"2021.05.31","body":"Teclas de atalho fornecem um método rápido e fácil para a executar comandos a partir de uma combinação de teclas predefinida. No openbox para definir uma tecla de atalho basta editar o arquivo ~/.config/openbox/rc.xml.\nSyntax 1 2 3 4 5 6 7  \u0026lt;keyboard\u0026gt; ... \u0026lt;keybind key=\u0026#34;KEY-COMBINATION...\u0026#34;\u0026gt; ...ACTIONS... \u0026lt;/keybind\u0026gt; ... \u0026lt;/keyboard\u0026gt;   KEY-COMBINATION é a combinação de teclas que liga a uma ação. O formato para KEY-COMBINATION é: Modificador-Modificador-Tecla (ex.: C-S-T). Qualquer número de modificadores (0 ou mais) podem ser usados juntos e cada um é separado por um \u0026ldquo;-\u0026rdquo;.\nModificadores  S tecla Shift C tecla Control A tecla Alt W tecla Super (tecla Windows) M tecla Meta H tecla Hyper  Exemplo 1 2 3 4 5  \u0026lt;keybind key=\u0026#34;S-A-T\u0026#34;\u0026gt; \u0026lt;action name=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;command\u0026gt;python /caminho/para/executável\u0026lt;/command\u0026gt; \u0026lt;/action\u0026gt; \u0026lt;/keybind\u0026gt;   O Openbox nem sempre reflete automaticamente as alterações feitas em seus arquivos de configurações, consequentemente será necessário recarregar manualmente esses arquivos depois de editados.\n$ openbox --reconfigure Referência: http://openbox.org/wiki/Help:Bindings#Key_bindings\n"}]