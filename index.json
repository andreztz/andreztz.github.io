[{"categories":null,"content":"Hugo Quebrando o Build: Um Caso Prático Nos últimos meses, mantive meu sistema operacional Arch Linux atualizado diariamente. Como é baseado no modelo rolling-release, o Arch Linux oferece as versões mais recentes e estáveis dos pacotes de software. Embora isso permita acesso rápido a novas funcionalidades, também traz consigo alguns riscos. Hoje, ao realizar uma simples alteração em uma imagem do meu blog, construído com o Hugo—um gerador de sites estáticos escrito em Go—encontrei um problema inesperado. O Hugo não conseguiu processar as mudanças, exibindo erros que interromperam o build. Mensagem de Erro: 19:36:54 with ztz in ~/Workspace/andreztz.github.io on  main … ➜ make rm -rf plublic/* hugo WARN DEPRECATED: Kind \"taxonomyterm\" used in outputs configuration is deprecated, use \"taxonomy\" instead. Start building sites … hugo v0.139.3+extended linux/amd64 BuildDate=unknown ERROR deprecated: .Site.Author was deprecated in Hugo v0.124.0 and will be removed in Hugo 0.140.0. Implement taxonomy 'author' or use .Site.Params.Author instead. ERROR deprecated: .Site.IsMultiLingual was deprecated in Hugo v0.124.0 and will be removed in Hugo 0.140.0. Use hugo.IsMultilingual instead. Total in 1046 ms Error: error building site: logged 2 error(s) make: *** [makefile:10: build] Error 1 O problema não foi causado por um bug do Hugo, mas pela incompatibilidade entre o ambiente de desenvolvimento (rolling-release) e as mudanças recentes no software. Isso resultou em breaking changes. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:1:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"O Que São Breaking Changes? No contexto de desenvolvimento de software, breaking changes são mudanças em sistemas, APIs ou bibliotecas que quebram a compatibilidade com versões anteriores. Isso exige que o código dependente seja ajustado para funcionar corretamente. Essas alterações são inevitáveis em projetos de software em constante evolução, mas podem gerar problemas se o ambiente de desenvolvimento ou produção não acompanhar as atualizações. No meu caso, enquanto o Hugo foi automaticamente atualizado no Arch Linux, o código do meu blog permaneceu inalterado, criando a incompatibilidade. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:2:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"Soluções para o Problema Identifiquei duas abordagens possíveis para resolver o problema: Atualizar o código do blog: Ajustar arquivos de configuração, temas e scripts para se adequar à nova versão do Hugo. Fazer o downgrade do Hugo: Reverter para uma versão anterior do Hugo, compatível com o ambiente atual. Optei pelo downgrade do Hugo, pois foi a solução mais rápida e prática para o meu caso. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:3:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"Como Fazer o Downgrade do Hugo no Arch Linux ⚠️ Atenção: O downgrade pode exigir alterações nas dependências associadas ao pacote. Confira a documentação oficial para detalhes. Verificar dependências e conflitos Use o comando abaixo para identificar as dependências do Hugo: pactree -r hugo Listar versões disponíveis no cache Confira as versões armazenadas localmente: ls /var/cache/pacman/pkg/hugo* Reinstalar a versão desejada Reinstale a versão do Hugo diretamente do cache: sudo pacman -U /var/cache/pacman/pkg/hugo-\u003cversao\u003e.pkg.tar.zst Bloquear atualizações futuras Adicione a seguinte linha no arquivo /etc/pacman.conf para evitar atualizações automáticas do pacote: IgnorePkg = hugo Agora, ao executar sudo pacman -Syu, um aviso como este será exibido: warning: hugo: ignoring package upgrade (0.135.0-1 =\u003e 0.139.3-1) Esse aviso é a confirmação que o hugo não será atualizado, pois está fixado na versão 0.135.0. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:4:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"Ajustando o Workflow de deploy no GitHub Actions Além de corrigir o ambiente local, foi necessário ajustar o deploy no GitHub Actions, fixando a versão compatível do Hugo na etapa de configuração: - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: '0.135.0' # Versão fixada, evite o uso de 'latest' extended: true Fixar a versão evita surpresas com futuras atualizações que possam introduzir novas breaking changes. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:5:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"Lições Aprendidas e Boas Práticas Breaking changes são comuns em ambientes modernos, especialmente com ferramentas que evoluem rapidamente, como o Hugo. Para mitigar seus impactos, considere adotar boas práticas, como: Controlar atualizações automáticas. Fixar versões específicas para desenvolvimento e produção. Manter-se informado sobre mudanças nas ferramentas utilizadas. Outra abordagem interessante é o uso de containers. Eles permitem criar ambientes isolados e controlados, garantindo: Reprodutibilidade. Isolamento. Facilidade no rollback. Essa experiência reforça a importância de planejar e gerenciar cuidadosamente o ambiente de desenvolvimento para minimizar impactos de atualizações inesperadas. ","date":"12-09-2024","objectID":"/hugo_quebrando_o_build_um_caso_pratico/:6:0","tags":null,"title":"Hugo Quebrando o Build: Um Caso Prático","uri":"/hugo_quebrando_o_build_um_caso_pratico/"},{"categories":null,"content":"KVM (Kernel-Based Virtual Machine) KVM é uma infraestrutura de virtualização integrada ao Linux é faz uso das extensões de virtualização do processador (como Intel VT-x e AMD-V). O KVM é composto do modulo do kernel kvm.ko que fornece a infraestrutura principal de virtualização e modulos especificos para processadores kvm-intel.ko e kvm-amd.ko. O KVM permite que uma máquina host execute vários ambientes virtuais isolados, chamados de máquinas virtuais (VMs), transformando o Linux em um hipervisor. O KVM faz parte do kernel Linux a partir da versão 2.6.20. ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:1:0","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"QEMU O QEMU é um emulador e virtualizador de máquinas de código aberto. Ele permite a execução de sistemas operacionais e programas de diferentes plataformas (como ARM) em uma máquina host (como um PC x86) através de uma técnica chamada tradução dinâmica. Esta técnica traduz, em tempo real, o código de máquina de uma arquitetura para outra, possibilitando um desempenho eficiente em comparação com métodos mais lentos, como a interpretação de instruções. Quando utilizado como virtualizador, o QEMU pode empregar hipervisores como KVM ou Xen, utilizando extensões de CPU (Intel VT-x ou AMD-V) para permitir que várias máquinas virtuais rodem simultaneamente no mesmo hardware. Isso resulta em um desempenho quase nativo, já que o código do sistema convidado é executado diretamente na CPU do host. ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:2:0","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Diferença entre Emulador e Virtualizador: Emulador: Simula completamente o hardware de uma máquina diferente, permitindo a execução de sistemas operacionais e programas de uma arquitetura de CPU específica em outra. Este processo envolve tradução de instruções, o que geralmente resulta em desempenho mais lento. Virtualizador: Permite a execução simultânea de múltiplos sistemas operacionais compatíveis com a arquitetura do host em um único hardware. Quando usado com KVM, o QEMU executa máquinas virtuais da mesma arquitetura da CPU do host, evitando a emulação e proporcionando desempenho próximo ao nativo. ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:0","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Pré-instalação Para verificar se seu sistema suporta a virtualização, execute os seguintes comandos: LC_ALL=C lscpu | grep Virtualization Virtualization: VT-x grep -E --color=auto 'vmx|svm|0xc0f' /proc/cpuinfo ... Se esses comandos não retornarem nenhum resultado, é provável que o suporte à virtualização esteja desativado na configuração do BIOS/UEFI. A maioria dos processadores x86_64 AMD/Intel desenvolvidos a partir de 2000/2001 suportam virtualização. ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:1","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Instalando pacotes necessários O primeiro passo é instalar os pacotes necessários para executar o KVM: sudo pacman -S --needed qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables-nft ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:2","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Libguestfs A Libguestfs é uma coleção de ferramentas úteis para executar tarefas comuns em imagens de disco de VMs de forma segura, como acessar e editar arquivos, monitorar discos, clonar VMs, criar VMs e muito mais. Também vem com um shell interativo (guestfish e virt-rescue). O pacote libguestfs esta disponível no repositório extra do Arch Linux, por tanto esse deve estar habilitado. sudo pacman -S --noconfirm --needed libguestfs ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:3","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Iniciando o serviço libvirt no boot sudo systemctl enable libvirtd.service \u0026\u0026 systemctl start libvirtd.service ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:4","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Gerenciando KVMs como usuário padrão Para gerenciar KVMs como usuário padrão, execute os seguintes comandos: sudo usermod -a -G libvirt $(whoami) newgrp libvirt ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:5","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Reiniciando o serviço libvirt sudo systemctl restart libvirtd.service ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:6","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"Suporte para UEFI Para habilitar o suporte ao UEFI, instale o pacote ovmf com o comando: sudo pacman -S ovmf O que é KVM? archlinux kvm libvirt Libguestfs Gerenciar KVMs como usuário padrão ","date":"07-24-2023","objectID":"/maquinas_virtuais_no_arch_linux/:3:7","tags":null,"title":"Máquinas virtuais no Arch Linux","uri":"/maquinas_virtuais_no_arch_linux/"},{"categories":null,"content":"O MPV é um player de mídia livre e de código aberto que suporta uma ampla variedade de formatos de arquivo e codecs. Ele tem muitos recursos avançados e é altamente configurável, mas às vezes pode ser útil controlá-lo programaticamente. Felizmente, o MPV possui uma interface de soquete que permite que outros processos controlem sua execução. Isso significa que é possível enviar enviar comandos para o MPV usando Python ou qualquer outra linguagem que suporte soquete. ","date":"04-12-2023","objectID":"/como_controlar_o_mpv_via_socket/:0:0","tags":null,"title":"Como controlar uma instancia do MPV via socket usando o Python","uri":"/como_controlar_o_mpv_via_socket/"},{"categories":null,"content":"Iniciando uma instancia do MPV –input-ipc-server= Enable the IPC support and create the listening socket at the given path. On Linux and Unix, the given path is a regular filesystem path. On Windows, named pipes are used, so the path refers to the pipe namespace (\\.\\pipe\u003cname\u003e). If the \\.\\pipe\\ prefix is missing, mpv will add it automatically before creating the pipe, so –input-ipc-server=/tmp/mpv-socket and –input-ipc-server=\\.\\pipe\\tmp\\mpv-socket are equivalent for IPC on Windows. Ao executar o mpv no linux por padrão um soquete é iniciado em /tmp/mpvsocket, no entanto, é possível definir um exclusivo com a opção --input-ipc-server=\u003cfilename\u003e. $ mpv --player-operation-mode=pseudo-gui --input-ipc-server=/tmp/my_mpvsocket ","date":"04-12-2023","objectID":"/como_controlar_o_mpv_via_socket/:1:0","tags":null,"title":"Como controlar uma instancia do MPV via socket usando o Python","uri":"/como_controlar_o_mpv_via_socket/"},{"categories":null,"content":"Configurando o soquete do tipo Unix Para enviar comandos ao MPV, é necessário estabelecer uma conexão com o soquete que o MPV está ouvindo. Para isso é necessário criar um objeto socket UNIX usando a biblioteca socket do Python e conectá-lo ao caminho especificado na opção ``–input-ipc-server=`. import socket SOCKET_PATH = '/tmp/my_mpvsocket' with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s: s.connect(SOCKET_PATH) ","date":"04-12-2023","objectID":"/como_controlar_o_mpv_via_socket/:2:0","tags":null,"title":"Como controlar uma instancia do MPV via socket usando o Python","uri":"/como_controlar_o_mpv_via_socket/"},{"categories":null,"content":"Enviando comandos para o mpv Com a conexão foi estabelecida, é possível enviar comandos utilizando o método sendall() do objeto socket. Os comandos devem ser enviados no formato de bytes, codificados como UTF-8. Veja um exemplo: import socket # Define o caminho do arquivo de socket SOCKET_PATH = '/tmp/my_mpvsocket' def enviar_comando_mpv(command): # estabelece a conexão com a interface de soquete do MPV with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s: s.connect(SOCKET_PATH) # Envia um comando s.sendall(bytes(command, encoding='utf-8')) response = s.recv(1024) # retorna as resposta decodificada para string UTF-8 return response.decode() # carregar um arquivo de mídia, todos os comandos devem # terminar com o caractere `\\n` para indicar o fim do comando comando = \"loadfile caminho/do/arquivo\\n\" resposta = enviar_comando_mpv(comando) print(resposta) # pausar a reprodução comando = \"cycle pause\\n\" resposta = enviar_comando_mpv(comando) print(resposta) # reproduzir o próximo arquivo na lista de reprodução comando = \"playlist-next\\n\" resposta = enviar_comando_mpv(comando) print(resposta) Alguns dos comandos disponíveis são: loadfile: carrega um arquivo de mídia. playlist-clear: limpa a lista de reprodução. playlist-add: adiciona um arquivo à lista de reprodução. playlist-remove: remove um arquivo da lista de reprodução. playlist-move: move um arquivo dentro da lista de reprodução. playlist-next: reproduz o próximo arquivo da lista de reprodução. playlist-prev: reproduz o arquivo anterior da lista de reprodução. seek: move a reprodução para um determinado tempo. pause: pausa ou despausa a reprodução. stop: para a reprodução. quit: fecha o mpv. Todos os comandos disponíveis estão listados na documentação do MPV. A sintaxe para enviar comandos é \u003ccomando\u003e [arg1 arg2]\\n, onde comando é o nome do comando, arg1 arg2 são os argumentos do comando separados por espaços. É altamente recomendável consultar a documentação para obter informações detalhadas sobre todos os comandos disponíveis e sua sintaxe exata. ","date":"04-12-2023","objectID":"/como_controlar_o_mpv_via_socket/:3:0","tags":null,"title":"Como controlar uma instancia do MPV via socket usando o Python","uri":"/como_controlar_o_mpv_via_socket/"},{"categories":null,"content":"Bibliotecas Python para controlar o MPV A interface de soquete é uma maneira poderosa e flexível de controlar o MPV. Mas, para simplificar o controle por meio do Python e evitar erros de baixo nível, existem várias bibliotecas que abstraem os detalhes de baixo nível, simplificando a interação com MPV. Aqui estão alguns exemplos: python-mpv-jsonipc: uma biblioteca Python que oferece uma interface de alto nível para interagir com o MPV usando JSON IPC. Isso abstrai muitos dos detalhes de baixo nível do soquete Unix do MPV e oferece uma maneira mais fácil de enviar comandos e receber respostas do MPV. MPV Python Binding: uma biblioteca Python que oferece uma interface de alto nível semelhante à biblioteca python-mpv-jsonipc, mas usa a API de binding do MPV. Python-mpv: outra biblioteca Python que oferece uma interface de alto nível para interagir com o MPV, mas usa a API de soquete Unix. É importante observar também que o mpv oferece suporte a scripts Lua e JavaScript que podem ser usados para realizar tarefas complexas, como personalização de teclas de atalho, modificação de legendas e muito mais. Com isso em mente, é possível explorar as possibilidades de integração entre o MPV e Python para criar aplicativos poderosos que controlam a reprodução de mídia de maneira sofisticada e personalizada. MPV - Manual de referência Python - socket IPC - Inter Process Communication Unix Domain Socket ","date":"04-12-2023","objectID":"/como_controlar_o_mpv_via_socket/:4:0","tags":null,"title":"Como controlar uma instancia do MPV via socket usando o Python","uri":"/como_controlar_o_mpv_via_socket/"},{"categories":null,"content":"A técnica de versionamento de dotfiles consiste em criar um repositório Git do tipo bare dentro de $HOME, que, ao contrário de um repositório Git padrão, não possui um diretório de trabalho associado. Sendo assim, é necessário definir explicitamente o que o repositório bare deve rastrear. Por fim, é necessário um alias para interagir com esse repositório de forma exclusiva. Vantagens: Não há necessidade de usar ferramentas externas Não há uso de links simbólicos Os arquivos são rastreados pelo Git É possível usar branches diferentes para computadores diferentes É possível replicar a configuração facilmente em uma nova instalação ","date":"04-09-2023","objectID":"/use_o_git_para_gerenciar_dotfiles/:0:0","tags":null,"title":"Use o git para gerenciar dotfiles","uri":"/use_o_git_para_gerenciar_dotfiles/"},{"categories":null,"content":"Configuração inicial Para iniciar a configuração do seu repositório bare, execute os seguintes comandos no terminal: Cria o repositório ~/.dotfiles git init --bare $HOME/.dotfiles Define o alias dotfiles alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Configura o Git para ignorar a $HOME inteira dotfiles config --local status.showUntrackedFiles no Adiciona o alias no ~/.bashrc echo \"alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'\" \u003e\u003e $HOME/.bashrc Depois de executar a configuração inicial, qualquer arquivo dentro da pasta $HOME pode ser versionado através do alias dotfiles com as opções normais do comando git, conforme mostrado abaixo: dotfiles status dotfiles add .vimrc dotfiles commit -m \"Add vimrc\" dotfiles add .bashrc dotfiles commit -m \"Add bashrc\" dotfiles push ","date":"04-09-2023","objectID":"/use_o_git_para_gerenciar_dotfiles/:1:0","tags":null,"title":"Use o git para gerenciar dotfiles","uri":"/use_o_git_para_gerenciar_dotfiles/"},{"categories":null,"content":"Configurando repositório remoto Para configurar o repositório remoto, primeiro crie um repositório no seu Gitlab ou GitHub e siga os passos a seguir, substituindo o \u003cusername\u003e pelo seu usuário no remoto. Adicione o remoto dotfiles remote add origin git@gitlab.com:\u003cusername\u003e/dotfiles.git dotfiles remote -v Envie os arquivos para o remoto dotfiles push -uf origin main ","date":"04-09-2023","objectID":"/use_o_git_para_gerenciar_dotfiles/:2:0","tags":null,"title":"Use o git para gerenciar dotfiles","uri":"/use_o_git_para_gerenciar_dotfiles/"},{"categories":null,"content":"Instalar os dotfiles em um novo sistema Primeiro, verifique se o alias foi adicionado ao seu .bashrc ou .zshrc. Certifique-se também de adicionar a pasta onde você irá clonar o repositório no arquivo .gitignore, para evitar problemas de recursão. echo \".dotfiles\" \u003e\u003e .gitignore Agora, clone seus dotfiles em um repositório bare em uma pasta oculta do seu $HOME: git clone --bare \u003cgit-repo-url\u003e $HOME/.dotfiles Defina o alias no escopo do shell atual: alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Faça o checkout do conteúdo real do repositório vazio para o seu $HOME: dotfiles checkout Nota: O passo anterior pode falhar e retornar uma mensagem de erro: error: The following untracked working tree files would be overwritten by checkout: .bashrc .gitignore Please move or remove them before you can switch branches. Aborting Isso ocorre porque sua pasta $HOME pode conter alguns arquivos de configurações locais, que serão substituídos pelos do Git. A solução é simples: faça backup dos arquivos se você se importa com eles, ou remova-os. Segue abaixo um possível atalho para mover todos os arquivos incorretos para uma pasta. mkdir -p .dotfiles-backup \u0026\u0026 \\ dotfiles checkout 2\u003e\u00261 | grep -e \"\\s+\\.\" | awk {'print $1'} | \\ xargs -I{} mv {} .dotfiles-backup/{} Nota: Se você teve o problema mencionado anteriormente, após mover os arquivos, execute novamente o dotfiles checkout. Agora defina o valor de showUntrackedFiles como no para este repositório: dotfiles config --local status.showUntrackedFiles no Pronto, a partir de agora você pode usar o alias definido anteriormente para gerenciar seus dotfiles na sua nova maquina: dotfiles status dotfiles add .vimrc dotfiles commit -m \"Add vimrc\" dotfiles add .bashrc dotfiles commit -m \"Add bashrc\" dotfiles push ","date":"04-09-2023","objectID":"/use_o_git_para_gerenciar_dotfiles/:3:0","tags":null,"title":"Use o git para gerenciar dotfiles","uri":"/use_o_git_para_gerenciar_dotfiles/"},{"categories":null,"content":"Ao executar testes automatizados em Python, é comum receber avisos (warnings) durante a execução dos testes. Para lidar com esses avisos, o Pytest oferece diversas opções para desativá-los. Neste artigo vamos explorar como utilizar a PYTEST_ADDOPTS para desabilita-los. ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:0:0","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"Entendendo o problema Vamos imaginar que estamos executando testes em uma aplicação Python utilizando o Pytest e nos deparamos com a seguinte saída: ===================================== warnings summary ====================================== tests/test_translator.py::test_translator_hello_world tests/test_translator.py::test_api_manager /home/ztz/projects/ztranslator/.venv/lib/python3.10/site-packages/httpx/_config.py:156: DeprecationWarning: ssl.PROTOCOL_TLS is deprecated context = ssl.SSLContext(ssl.PROTOCOL_TLS) tests/test_translator.py::test_translator_hello_world tests/test_translator.py::test_api_manager /home/ztz/projects/ztranslator/.venv/lib/python3.10/site-packages/httpx/_config.py:159: DeprecationWarning: ssl.OP_NO_SSL*/ssl.OP_NO_TLS* options are deprecated context.options |= ssl.OP_NO_TLSv1 tests/test_translator.py::test_translator_hello_world tests/test_translator.py::test_api_manager /home/ztz/projects/ztranslator/.venv/lib/python3.10/site-packages/httpx/_config.py:160: DeprecationWarning: ssl.OP_NO_SSL*/ssl.OP_NO_TLS* options are deprecated context.options |= ssl.OP_NO_TLSv1_1 -- Docs: https://docs.pytest.org/en/stable/warnings.html Esses avisos podem ser gerados por diversos motivos, como o uso de funções obsoletas, comportamentos não recomendados, entre outros, e são úteis para que o desenvolvedor identifique possíveis problemas na sua aplicação ou nas bibliotecas utilizadas. No entanto, em alguns casos, eles podem não ser importantes para o teste em questão, sujando a tela e tirando o foco do resultado dos testes. ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:1:0","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"Entendendo o PYTEST_ADDOPTS PYTEST_ADDOPTS¶ This contains a command-line (parsed by the py:mod:shlex module) that will be prepended to the command line given by the user, see Builtin configuration file options for more information. O PYTEST_ADDOPTS é uma variável de ambiente, que armazena parâmetros de linha de comando, que durante a execução do pytest serão adicionados a linha de comando fornecida pelo usuário. É possível defini-la exportando-a no terminal ou direto no arquivo Makefile. ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:2:0","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"Desativando os avisos na linha de comando Para desabilitar os avisos (warnings) no pytest, podemos utilizar a opção -p no:warnings. Veja o exemplo a seguir: $ pytest -s -v -p no:warnings Outra opção é exportar a variável de ambiente PYTEST_ADDOPTS com a opção -p no:warnings. Para isso usamos o comando export, veja o exemplo abaixo: $ export PYTEST_ADDOPTS=\"-p no:warnings\" $ poetry run pytest -s -v Com a variável PYTEST_ADDOPTS definida, o pytest será executado com a opção -p no:warnings, que desabilita todos os avisos (warnings) durante a execução dos testes. Caso você queira desabilitar somente alguns avisos específicos, é possível utilizar a opção -W do pytest em conjunto com a opção -p no:warnings. Veja o exemplo abaixo: $ export PYTEST_ADDOPTS=-p no:warnings -W ignore::DeprecationWarning $ poetry run pytest -s -v Com a opção -W ignore::DeprecationWarning, o pytest irá desabilitar somente os avisos do tipo DeprecationWarning. Para remover a variável PYTEST_ADDOPTS, use o comando: $ unset PYTEST_ADDOPTS Utilizando o comando env a variável de ambiente PYTEST_ADDOPTS será definida apenas para a execução do pytest e não afetará outras execuções. Veja o exemplo abaixo: $ env PYTEST_ADDOPTS=\"-p no:warnings\" pytest -s -v ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:2:1","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"Desativar os avisos usando o makefile Para utilizar o PYTEST_ADDOPTS em conjunto com o Makefile, podemos definir a variável de ambiente no início do arquivo, antes da definição da regra test. Veja o exemplo abaixo: export PYTEST_ADDOPTS=-p no:warnings -W ignore::DeprecationWarning .PHONY: test test: poetry run pytest -s -v ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:2:2","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"Conclusão O Pytest é uma ferramenta importante para garantir a qualidade do código em projetos Python. No entanto, durante a execução dos testes automatizados, podem ser gerados avisos (warnings) que, em alguns casos, podem ser irrelevantes. Nesse sentido, a opção -p no:warnings, definida na variável de ambiente PYTEST_ADDOPTS¶ pode ser utilizada para desativar todos os avisos durante a execução dos testes. No entanto, é importante lembrar que esses avisos podem conter informações importantes para identificar possíveis problemas na aplicação ou bibliotecas utilizadas. Portanto, a desativação dos avisos deve ser feita com cuidado e de forma criteriosa, de modo a não comprometer a qualidade do código. ","date":"03-17-2023","objectID":"/desativar_avisos_no_pytest/:3:0","tags":null,"title":"PYTEST_ADDOPTS e como desabilitar warnings no pytest","uri":"/desativar_avisos_no_pytest/"},{"categories":null,"content":"O editor de texto neovim usa o formato de arquivo .spl para armazenar palavras de uma determinada linguagem, essas são usadas para fazer a verificação ortográfica. O arquivo .spl é um arquivo binário, esse formato proporciona o rápido carregamento da lista de palavras ao mesmo tempo que a mantém pequena. O arquivo .spl pode ser criado a partir de arquivos myspell .aff e .dic usados pelo verificador ortográfico VERO sigla que significa VERificador Ortografico do LibreOffice. ","date":"05-15-2022","objectID":"/neovim_spell_check/:0:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Gerar um arquivo spell Para gerar o arquivo .spl português do Brasil siga os passos a seguir: $ mkdir /tmp/vero \u0026\u0026 cd /tmp/vero $ wget https://pt-br.libreoffice.org/assets/Uploads/PT-BR-Documents/VERO/VeroptBR3215AOC.oxt $ file VeroptBR3215AOC.oxt VeroptBR3215AOC.oxt: Zip archive data, at least v2.0 to extract, compression method=deflate $ unzip VeroptBR3215AOC.oxt Abra o vim no diretório corrente e execute o comando :mkspell pt pt_BR para gerar o .spl :mkspell pt pt_BR # ... Saída suprimida Reading dictionary file pt_BR.dic... Compressed case-folded of 16207519 nodes; 290324 (1%) remaining Compressed keep-case of 189406 nodes; 10459 (5%) remaining # ... Saída suprimida Compressed keep-case of 596998 nodes; 596998 (100%) remaining Compressing word tree... Compressed case-folded of 55323495 nodes; 47773995 (86%) remaining Compressed keep-case of 746484 nodes; 601437 (80%) remaining Writing spell file pt.utf-8.spl... Done! A saída é um arquivo pt.utf-8.spl, mova-o para ~/.local/share/nvim/spell/ $ mv /tmp/vero/pt.utf-8.spl ~/.local/share/nvim/spell Obs.: De acordo com a documentação, o neovim busca por spellfiles no runtimepath no diretório spell. ","date":"05-15-2022","objectID":"/neovim_spell_check/:1:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Uso A medida que o corretor ortográfico detecta a palavra incorreta, essa é marcada com um sublinhado. Para corrigi-la, posicione o cursor sob a mesma, no modo Visual pressione z + =. Um menu irá mostrar as palavras sugeridas pelo corretor, então é só escolher a correta. No modo de inserção, com o cursor posicionado no fim da palavra com erro, pressione ctrl + x + s para exibir a caixa de sugestões, funciona como o autocompletar de palavras usando o ctrl + p. Ativar o corretor ortográfico: :setlocal spell spelllang=pt_br,en Obs.: É possivel ativar mais de uma linguagem Carregar um arquivo .spl e ativá-lo: : setlocal spell spellfile=\"/usr/share/vim/vimfiles/spell/pt.utf-8.spl\" spelllang=pt_br Para desativar o corretor: :set nospell ","date":"05-15-2022","objectID":"/neovim_spell_check/:2:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Comandos do corretor ortográfico no modo visual Comando Ação ]s busca a próxima palavra [s busca a palavra anterior z= mostra a lista de sugestões para a palavra zg adiciona a palavra sob o cursor no dicionário, assim ela não será mais marcada como errada zug desfaz a última palavra adicionada zw remove a palavra sob o cursor do dicionário, assim ela será marcada como errada zuw desfaz a última palavra removida ","date":"05-15-2022","objectID":"/neovim_spell_check/:3:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Comandos do corretor ortográfico no modo inserção Comando Ação ctrl + x + s Exibir a caixa de sugestões ctrl + n Avançar para a próxima sugestão ctrl + p Voltar para a sugestão anterior ","date":"05-15-2022","objectID":"/neovim_spell_check/:4:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Ativar o corretor ortográfico baseado no tipo de arquivo vim.cmd [[ autocmd BufRead, BufNewFile *.md setlocal spell spelllang=pt_br]] ","date":"05-15-2022","objectID":"/neovim_spell_check/:5:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Ativar o corretor ortográfico sob demanda nnoremap \u003csilent\u003e \u003cF3\u003e :set spell!\u003cCR\u003e inoremap \u003csilent\u003e \u003cF3\u003e\u003cC-O\u003e:set spell!\u003cCR\u003e ","date":"05-15-2022","objectID":"/neovim_spell_check/:6:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Configuração global (opcional) No arquivo init.vim \"spell languages set spelllang=pt_br No arquivo init.lua vim.o.spelllang=\"pt_br\" ","date":"05-15-2022","objectID":"/neovim_spell_check/:7:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"Outras linguagens No web site do vim.org existe um diretório com as linguagens usadas pelo vim. Então simplesmente escolha uma, baixe-a no diretório ~/.local/share/nvim/spell e ative o corretor ortográfico. Nvim documentation: spell ","date":"05-15-2022","objectID":"/neovim_spell_check/:8:0","tags":null,"title":"Corretor ortográfico no Neovim","uri":"/neovim_spell_check/"},{"categories":null,"content":"O Openwrt pode ser gerenciado no terminal via ssh, ou pela interface web do usuário LuCI. O uso da interface web facilita a administração do sistema, no entanto, por padrão a interface web não tem suporte a conexão segura usando o HTTPS. Por esse motivo existe o risco de um invasor capturar o tráfego de rede e obter as credenciais de autenticação, visto que a troca de mensagens entre cliente e servidor sem a camada de segurança do HTTPS (SSL/TLS) é feito em texto puro. O Openwrt oferece a opção de implementar o HTTPS, mas é preciso gerar e armazenar um certificado TLS autoassinado e requer a instalação de pacotes adicionais (uci-ssl e dependências). No caso de dispositivos com pouca memoria, instalar pacotes adicionais não é uma opção, então gostaria de apresentar outra configuração que pode ser usada para proteger o acesso à interface web do Openwrt, que é encapsular o tráfego http via ssh. Primeiro vamos fazer uma cópia e olhar o arquivo de configuração padrão do servidor web. $ scp openwrt:/etc/config/uhttpd ~ uhttpd 100% 710 458.3KB/s 00:00 $ head ~/uhttpd # Server configuration config uhttpd main # HTTP listen addresses, multiple allowed list listen_http 0.0.0.0:80 list listen_http [::]:80 # HTTPS listen addresses, multiple allowed list listen_https 0.0.0.0:443 list listen_https [::]:443 Usando o comando netstat -apn | grep :80 listamos os soquetes TCP/IP abertos pelo servidor web. root@openwrt:~# netstat -apn | grep :80 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 :::80 :::* LISTEN root@openwrt:~# netstat -ana | grep :443 root@openwrt:~# A linha 0.0.0.0:80 nos diz que o computador local esta ouvindo a porta 80, a espera de conexões de qualquer computador remoto. O 0.0.0.0 é um endereço especial que representa todas as interfaces de rede com um IP válido nesse host, por exemplo, poderíamos ter duas interfaces com os seguintes endereços 192.168.1.1, 172.17.0.2 como o servidor web escuta usando o endereço 0.0.0.0:80 ambos respondem por esse endereço de socket. Agora a configuração do servidor web uHTTPd deve ser ajustada, para fazer isso conectamos ao roteador via SSH e abrimos o arquivo /etc/config/uhttpd. # vim /etc/config/uhttpd Em seguida, comentamos as linhas que contêm list listen_http * e adicionamos a linha list listen_http 127.0.0.1:80 . A seguir temos as primeiras linhas do arquivo de configuração após a edição. # Server configuration config uhttpd main # HTTP listen addresses, multiple allowed # list listen_http 0.0.0.0:80 # esta linha deve estar comentada # list listen_http [::]:80 # esta linha deve estar comentada # HTTPS listen addresses, multiple allowed # list listen_https 0.0.0.0:443 # esta linha deve estar comentada # list listen_https [::]:443 # esta linha deve estar comentada # linha adicionada list listen_http 127.0.0.1:80 ... Salve o arquivo e reinicie o serviço uHTTPd usando o comando: # /etc/init.d/uhttpd restart Com o comando netstat vemos que agora nosso servidor web escuta em um novo endereço: root@openwrt:~# netstat -na | grep :80 tcp 0 0 127.0.0.1:80 0.0.0.0:* LISTEN O uso do endereço 127.0.0.1 tem objetivo de restringir o acesso a interface web para host remotos usando a interface de loopback, que é uma interface de rede virtual que é reservada para a comunicação interna no host. Depois de reiniciar o servidor, a interface web do LuCI não esta acessível através do IP usual 192.168.1.1, agora o servidor web escuta por novas conexões usando o endereço 127.0.0.1:80 e só podemos alcançá-la por meio de um túnel ssh. Para criar o túnel, execute o seguinte comando no terminal: veja: 127.0.0.1 vs 0.0.0.0 # ssh -L 127.0.0.1:8080:127.0.0.1:80 root@192.168.1.1 veja: manual ssh -L Encaminhamento de portas Para evitar sempre digitar todo o comando que cria o túnel ssh adicione ao arquivo ~/.ssh/config o seguite: Host luci-tunnel Hostname openwrt.lan Port 22 User root LocalForward 127.0.0.1:8080 127.0.0.1:80 Então o tunel ssh pode ser criado com o seguinte comando: # ssh luci-tunnel O endereço local 127.0.0.1","date":"04-05-2022","objectID":"/openwrt-interface-web-seguranca/:0:0","tags":null,"title":"Protegendo o acesso a interface web do Openwrt","uri":"/openwrt-interface-web-seguranca/"},{"categories":null,"content":"Segurança adicional Para minimizar os riscos de acesso não autorizado através da interface web, ative o servidor web via ssh somente quando necessário. /etc/init.d/uhttpd disable /etc/init.d/uhttpd stop ","date":"04-05-2022","objectID":"/openwrt-interface-web-seguranca/:1:0","tags":null,"title":"Protegendo o acesso a interface web do Openwrt","uri":"/openwrt-interface-web-seguranca/"},{"categories":null,"content":"uci comandos O uci pode ajustar a configuração do uhttpd sem usar um editor de texto, no terminal digite as linhas a seguir: # uci -q delete uhttpd.main.listen_http # uci add_list uhttpd.main.listen_http=\"127.0.0.1:80\" # uci add_list uhttpd.main.listen_http=\"[::1]:80\" # uci -q delete uhttpd.main.listen_https # uci add_list uhttpd.main.listen_https=\"127.0.0.1:443\" # uci add_list uhttpd.main.listen_https=\"[::1]:443\" # uci commit uhttpd # /etc/init.d/uhttpd restart ","date":"04-05-2022","objectID":"/openwrt-interface-web-seguranca/:2:0","tags":null,"title":"Protegendo o acesso a interface web do Openwrt","uri":"/openwrt-interface-web-seguranca/"},{"categories":null,"content":"Teclas de atalho fornecem um método rápido e fácil para a executar comandos a partir de uma combinação de teclas predefinida. No openbox para definir uma tecla de atalho basta editar o arquivo ~/.config/openbox/rc.xml. ","date":"05-31-2021","objectID":"/atalhos-teclado-openbox/:0:0","tags":null,"title":"Como configurar teclas de atalho no Openbox","uri":"/atalhos-teclado-openbox/"},{"categories":null,"content":"Syntax \u003ckeyboard\u003e ... \u003ckeybind key=\"KEY-COMBINATION...\"\u003e ...ACTIONS... \u003c/keybind\u003e ... \u003c/keyboard\u003e KEY-COMBINATION é a combinação de teclas que liga a uma ação. O formato para KEY-COMBINATION é: Modificador-Modificador-Tecla (ex.: C-S-T). Qualquer número de modificadores (0 ou mais) podem ser usados juntos e cada um é separado por um “-”. Modificadores S tecla Shift C tecla Control A tecla Alt W tecla Super (tecla Windows) M tecla Meta H tecla Hyper Exemplo \u003ckeybind key=\"S-A-T\"\u003e \u003caction name=\"Execute\"\u003e \u003ccommand\u003epython /caminho/para/executável\u003c/command\u003e \u003c/action\u003e \u003c/keybind\u003e O Openbox nem sempre reflete automaticamente as alterações feitas em seus arquivos de configurações, consequentemente será necessário recarregar manualmente esses arquivos depois de editados. $ openbox --reconfigure Referência: http://openbox.org/wiki/Help:Bindings#Key_bindings ","date":"05-31-2021","objectID":"/atalhos-teclado-openbox/:1:0","tags":null,"title":"Como configurar teclas de atalho no Openbox","uri":"/atalhos-teclado-openbox/"},{"categories":null,"content":" Hi there Este é um espaço dedicado à documentação, armazenamento de notas, trechos de código e links para referências futuras. **📫 Reach me at:** ","date":"01-01-0001","objectID":"/about/:0:0","tags":null,"title":"Sobre - André P. Santos","uri":"/about/"}]